{
  "hash": "e5f6fc5b8bae2267a23a83c4e1f63e1b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Choropleth map\"\ndate: \"2023-09-30\"\ncategories: [R, spatial, ggplot2]\nimage: \"image.png\"\n# Execution \nexecute: \n  warning: false\n---\n\n\n> # **Choropleth** maps with ggplot2\n\nIn this exercise, we will create two choropleth maps using `ggplot2`:\n\n-   Map of Spanish population by municipality\n\n-   Map of men/women ratio in Spain by municipality\n\n## Watch the video\n\n\n{{< video https://www.youtube.com/watch?v=dkSVGK272wc >}}\n\n\n\n## Load packages\n\nWe will use the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pacman\")\nlibrary(pacman)\n\np_load(\n  ## Core\n  tidyverse,\n  \n  ## Spatial data manipulation\n  sf,\n  \n  ## Download data\n  mapSpain, rnaturalearth,\n  \n  ## Visualization\n  RColorBrewer, ggspatial\n)\n\n# High resolution world map\nremotes::install_github(\"ropensci/rnaturalearthhires\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsp (2.1-3 -> 2.1-4) [CRAN]\npackage 'sp' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\cidre\\AppData\\Local\\Temp\\RtmpGUqSON\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\cidre\\AppData\\Local\\Temp\\RtmpGUqSON\\remotes1dc46d0e7092\\ropensci-rnaturalearthhires-dd1e210/DESCRIPTION' ... OK\n* preparing 'rnaturalearthhires':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'rnaturalearthhires_1.0.0.9000.tar.gz'\n\n```\n\n\n:::\n:::\n\n\nFirst, I use `pacman` to load all the packages. Then, I use the `tidyverse` as the core package for data manipulation and visualization. The package `sf` will be used to treat the vectorial data. The package `mapSpain` provide functions to download the administrative boundaries of Spain (click [here](https://ropenspain.github.io/mapSpain/) for further information). The `rnaturalearth` is a package that will provide us with the world map. However, for using the high resolution map we need also to install `rnturalearthhires` from GitHub. Finally, I will use the `RColorBrewer` package for colour palettes, and the `ggspatial` to add the map scale and north arrow. So, let's dive into the exercise!\n\n## Prepare the data\n\nThe first step, is to download the world countries map using the `ne_countries()` function. This will return the map we see in @fig-world.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# World countries\nworld_sf <- ne_countries(\n  scale       = 10,\n  returnclass = \"sf\"\n)\nplot(world_sf[\"region_un\"], main = \"World Map\")\n```\n\n::: {.cell-output-display}\n![World map](index_files/figure-html/fig-world-1.png){#fig-world width=672}\n:::\n:::\n\n\nNext, we can get the Spanish population by municipality in 2019 using the `mapSpain` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get Spanish population by municipality in 2019\nspain_pop_tbl <- mapSpain::pobmun19\n\nhead(spain_pop_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cpro provincia cmun      name  pob19   men women\n1   02  Albacete  001 Abengibre    790   379   411\n2   02  Albacete  002    Alatoz    519   291   228\n3   02  Albacete  003  Albacete 173329 84687 88642\n4   02  Albacete  004  Albatana    692   356   336\n5   02  Albacete  005   Alborea    658   337   321\n6   02  Albacete  006  Alcadozo    654   363   291\n```\n\n\n:::\n:::\n\n\nThis is a data frame with the data we want to plot. However, we need to assign this data to a spatial object with the municipalities. We can get the `sf` object using the function `esp_get_munic`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get Spain boundaries by municipality\nspain_sf <- esp_get_munic()\n\nhead(spain_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -3.14019 ymin: 36.73845 xmax: -2.05701 ymax: 37.54576\nGeodetic CRS:  ETRS89\n    codauto ine.ccaa.name cpro ine.prov.name cmun      name LAU_CODE\n382      01     Andalucía   04       Almería  001      Abla    04001\n379      01     Andalucía   04       Almería  002  Abrucena    04002\n374      01     Andalucía   04       Almería  003      Adra    04003\n375      01     Andalucía   04       Almería  004 Albánchez    04004\n358      01     Andalucía   04       Almería  005 Alboloduy    04005\n373      01     Andalucía   04       Almería  006     Albox    04006\n                          geometry\n382 POLYGON ((-2.77744 37.23836...\n379 POLYGON ((-2.88984 37.09213...\n374 POLYGON ((-2.93161 36.75079...\n375 POLYGON ((-2.13138 37.29959...\n358 POLYGON ((-2.70077 37.09674...\n373 POLYGON ((-2.15335 37.54576...\n```\n\n\n:::\n:::\n\n\nWe see that the data frame `spain_pop_tbl` and the sf `spain_sf` share 3 variables:\n\n-   cpro: province code\n\n-   cmun: municipality code\n\n-   name: name of the municipality\n\nThe next step is to join both tables together, so we have the data frame attributes in our spatial object. We can achieve this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join population to sf object\nspain_pop_sf <- right_join(\n  spain_sf,\n  spain_pop_tbl,\n  by = join_by(cpro, cmun)\n)\n```\n:::\n\n\nNote that here I did not include the variable `name` for joining the dataset. There are two reasons:\n\n1.  The name and cmun variables express exactly the same.\n2.  The variable name have some misspellings between datasets creating some NA values.\n\nOnce this is clarified, we can begin with the maps.\n\n## Spanish population\n\nWe could plot the Spanish population as a continuous variable, however, this would not be the best approach since the distribution of the population is quite irregular, and there is a small number of cities with very high population. Therefore, we can create bins based on the quantiles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the breaks (bin edges) based on percentiles\nbreaks <- quantile(\n  spain_pop_sf$pob19, \n  probs = seq(0, 1, by = 0.1)\n)\n\n# Round to hundred, and keep unique values\nbreaks <- round(breaks, -2) %>% unique()\nbreaks[length(breaks)] <- breaks[length(breaks)] + 100\n\n# Create bins\nspain_pop_ready_sf <- spain_pop_sf %>% \n  mutate(\n    pop_bin = cut(pob19, breaks = breaks, dig.lab = 10)\n  )\n\nprint(levels(spain_pop_ready_sf$pop_bin))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"(0,100]\"        \"(100,200]\"      \"(200,300]\"      \"(300,500]\"     \n[5] \"(500,900]\"      \"(900,1700]\"     \"(1700,3500]\"    \"(3500,9200]\"   \n[9] \"(9200,3266200]\"\n```\n\n\n:::\n:::\n\n\nWith the previous code we create the new variable called `pop_bin` which consists in a total of 9 bins representing similar amount of municipalities. Finally, we can represent it graphically with the next code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the population\nggplot(spain_pop_ready_sf) + \n  ## Geometries\n  geom_sf(data = world_sf, fill = \"grey90\", color = \"black\") +\n  geom_sf(aes(fill = pop_bin), color = NA) +\n  ## Scales\n  scale_fill_brewer(palette = \"RdBu\", na.translate = FALSE, direction = -1) +\n  ## Labels\n  labs(\n    title   = \"Spanish Population by Municipality\",\n    fill    = \"Population\",\n    caption = \"Author: Adrián Cidre González\"\n  ) +\n  ## Coordinates\n  coord_sf(xlim = st_bbox(spain_pop_ready_sf)[c(1,3)],\n           ylim = st_bbox(spain_pop_ready_sf)[c(2,4)]) +\n  ## Theme\n  theme_bw() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    legend.background = element_rect(color = \"black\")\n  ) +\n  ## Ggspatial\n  annotation_scale(location = \"br\") +\n  annotation_north_arrow(location = \"tr\", which_north = \"true\")\n```\n\n::: {.cell-output-display}\n![Population in Spain by Municipality (2019)](index_files/figure-html/fig-population-1.png){#fig-population width=768}\n:::\n:::\n\n\nWe see some patterns in the distribution of the Spanish population. The central-north area exhibits a clear lower population than others areas., whereas coastal areas and islands area highly populated.\n\n## Ratio Men/Women\n\nI will now create a similar visualization, but displaying the ratio between men and women by municipality. First, I create the new column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ratio men-women\nspain_pop_ready_sf <- spain_pop_sf %>% \n  mutate(ratio_mw = men/women)\n\nsummary(spain_pop_ready_sf$ratio_mw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3415  1.0003  1.0690     Inf  1.2067     Inf \n```\n\n\n:::\n:::\n\n\nWe can see in the summary before that the values between the minimum and the $3^{rd}$ quantile exhibit normal values, but the maximum value is infinite. This is because in some municipality there are men, but not woman (i.e. division by zero). We can see also the boxplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(spain_pop_ready_sf$ratio_mw)\n```\n\n::: {.cell-output-display}\n![Distribution of Men/Women ratio by municipallity](index_files/figure-html/fig-boxpl2-1.png){#fig-boxpl2 width=672}\n:::\n:::\n\n\nThis tells us that a visualization of the continuous distribution will barely differentiate between area with higher women proportion (\\<1), and areas with higher men proportion (\\>1). Therefore, I apply the same approach creating bins:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the breaks (bin edges) based on percentiles\nbreaks <- quantile(\n  spain_pop_ready_sf$ratio_mw, \n  probs = seq(0, 1, by = 0.1)\n)\n\n# Round to hundred, and keep unique values\nbreaks <- round(breaks, 2) %>% unique()\n\n# Create bins\nspain_pop_ready_sf <- spain_pop_ready_sf %>% \n  mutate(\n    ratio_bin = cut(ratio_mw, breaks = breaks)\n  )\n\n## Print bins\nprint(levels(spain_pop_ready_sf$ratio_bin))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"(0.34,0.96]\" \"(0.96,0.99]\" \"(0.99,1.01]\" \"(1.01,1.04]\" \"(1.04,1.07]\"\n [6] \"(1.07,1.11]\" \"(1.11,1.17]\" \"(1.17,1.26]\" \"(1.26,1.44]\" \"(1.44,Inf]\" \n```\n\n\n:::\n:::\n\n\nWith this code, a total of 10 bins are generated with the ranges showed above. So let's proceed to the visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the population\nggplot(spain_pop_ready_sf) + \n  ## Geometries\n  geom_sf(data = world_sf, fill = \"grey90\", color = \"black\") +\n  geom_sf(aes(fill = ratio_bin), color = NA) +\n  ## Scales\n  scale_fill_brewer(palette = \"RdBu\", na.translate = FALSE, direction = -1) +\n  ## Labels\n  labs(\n    title   = \"Men/Women ratio\",\n    fill    = \"Ratio\",\n    caption = \"Author: Adrián Cidre González\"\n  ) +\n  ## Coordinates\n  coord_sf(xlim = st_bbox(spain_pop_ready_sf)[c(1,3)],\n           ylim = st_bbox(spain_pop_ready_sf)[c(2,4)]) +\n  ## Theme\n  theme_bw() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    legend.background = element_rect(color = \"black\")\n  ) +\n  ## Ggspatial\n  annotation_scale(location = \"br\") +\n  annotation_north_arrow(location = \"tr\", which_north = \"true\")\n```\n\n::: {.cell-output-display}\n![Sex ratio in Spain by Municipality in 2019 (ratio men/women)](index_files/figure-html/fig-sex-ratio-1.png){#fig-sex-ratio width=672}\n:::\n:::\n\n\nCuriously, we can see that the less populated areas are also populated mostly by men, whereas coastal areas and islands tend to be more balanced, or more populated by women.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}