{
  "hash": "52879b2925db751df5db6c730feca711",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Density interactive map of wolf in the Iberian Peninsula\"\ndescription: \"Create a density map of any species using GBIF data and mapgl\"\ndate: \"2024-07-21\"\ncategories: [ggplot2, interactive, R, spatial]\nimage: \"image.png\"\nbibliography: references.bib\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n{{< video https://youtu.be/wgCP6K-rmpU >}}\n\n\n\n\n## Introduction\n\nToday we will see how to create a map of the density of wolves' observations in the Iberian Peninsula during the last decade (2014-2023).\n\nWe will use data from the Global Biodiversity Information Facility (GBIF) through the `{geodata}` package, and we will create an interactive heatmap using the new `{mapgl}` R package.\n\n## Loading packages\n\nWe will use the following packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load pacman\nlibrary(pacman)\n\n## Load rest of the packages\np_load(geodata, giscoR, mapboxapi, mapgl, sf, terra, tidyverse)\n```\n:::\n\n\n\n-   `{geodata}` [@geodata]: we will use it to download data from the GBIF database.\n\n-   `{giscoR}` [@giscoR]: to download the boundaries of the study area.\n\n-   `{mapboxapi}` [@mapboxapi]: to store our mapbox API access token.\n\n-   `{mapgl}` ([mapgl](https://walker-data.com/mapgl/index.html){target=\"_blank\"}): to create the interactive maps. The package is not published in CRAN yet.\n\n-   `{sf}` [@sf]: to manipulate vectorial data.\n\n-   `{terra}` [@terra]: to manipulate raster data.\n\n-   `{tidyverse}` [@tidyverse]: to manipulate data in general.\n\n## Mapbox API {#sec-setup}\n\n[Mapbox](https://www.mapbox.com/){target=\"_blank\"} is an online maps provider that is currently used by many companies in the world, and it's accessible through R using the `{mapgl}` package. You can create an account for free in [https://www.mapbox.com/](https://www.mapbox.com/){target=\"_blank\"}, so you can get your API token.\n\n::: callout-note\nNote that mapbox will ask you for your billing address at any time, because this service is not completely free. But don't worry, for this tutorial you won't be charged.\n:::\n\nOnce you created your account, you can log in into the mapbox webpage, and you will see something like this:\n\n![Mapbox dashboard](figs/mapbox_dashboard.png){#fig-mapbox-dashboard fig-align=\"center\"}\n\nOn the right side, you can see the current billing period usage. You can have up to 50,000 map loads per month for free, but when you surpass this number you'll be charged (more details about pricing [here](https://www.mapbox.com/pricing)).\n\n::: callout-important\nNote that every view triggers a map load\n:::\n\nSo, if you want to continue with this tutorial, you must create an API access token in your mapbox dashboard [@fig-mapbox-dashboard]. Once you have your token, you have two options to use it:\n\n::: panel-tabset\n## Option 1\n\nThis option will work only for the current project. You will use the following function which will use a .Renviron file to store and access the token:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmb_access_token(\"your_token_goes_here\", install = TRUE)\n```\n:::\n\n\n\nAfter executing this line of code, you **must** restart you R session to take effect.\n\n## Option 2\n\nThis option will store the API token as an environment variable in your system, and it can be accessed by any project in your computer. Find your environment variables, and create a new one called **MAPBOX_PUBLIC_TOKEN** with the value of your token:\n\n![Environment variables](figs/mapbox_envvar.png){fig-align=\"center\"}\n\nAfter you've done this, you need to **close and open Rstudio** to take effect.\n:::\n\nNote that you **should never share your token** with anybody. In the case that your token has been compromised, delete it and create a new one.\n\n## Load the data\n\nIn this exercise we need to download two sources of data, that we already used in the [previous week's post](https://adrian-cidre.com/posts/008_wolves_iberia/){target=\"_blank\"}:\n\n-   Study area\n\n-   Wolf data\n\n### Study area\n\nThe study area for this exercise is the Iberian Peninsula, which includes the main land of Spain and Portugal without islands. To extract this area, we need first to get the boundaries of Spain and Portugal, eliminate the islands, and combine both countries. So, one step at a time. We start downloading the country of Portugal, and casting the MULTIPOLYGON to POLYGON:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get Portugal\nportugal_sf <- gisco_get_countries(\n  resolution = \"01\",\n  country    = \"Portugal\"\n) |> \n  st_cast(\"POLYGON\")\n\n## Visualize\nplot(st_geometry(portugal_sf))\n```\n\n::: {.cell-output-display}\n![Country of Portugal](index_files/figure-html/fig-portugal-1.png){#fig-portugal width=672}\n:::\n:::\n\n\n\nTo filter the main land, we can calculate the area of each polygon, and slice the polygon with the maximum value of area:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get main land\nportugal_sf <- portugal_sf |> \n  mutate(\n    area = st_area(portugal_sf)\n  ) |> \n  slice_max(area)\n\n## Visualize\nplot(st_geometry(portugal_sf))\n```\n\n::: {.cell-output-display}\n![Main land of Portugal](index_files/figure-html/fig-portugal-mainland-1.png){#fig-portugal-mainland width=672}\n:::\n:::\n\n\n\nNow, we can do the same for Spain:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get Spain\nspain_sf <- gisco_get_countries(\n  resolution = \"01\",\n  country    = \"Spain\"\n) |> \n  st_cast(\"POLYGON\")\n\n## Get main land\nspain_sf <- spain_sf |> \n  mutate(\n    area = st_area(spain_sf)\n  ) |> \n  slice_max(area)\n\n## Visualize\nplot(st_geometry(spain_sf))\n```\n\n::: {.cell-output-display}\n![Main land of Spain](index_files/figure-html/fig-spain-1.png){#fig-spain width=672}\n:::\n:::\n\n\n\nUp to this point, we have two different {sf} objects with the main land of Portugal [@fig-portugal-mainland] and Spain [@fig-spain]. The final step, is to combine them to form only one polygon:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Make union\niberia_sf <- st_union(\n  spain_sf,\n  portugal_sf\n) |> \n  st_transform(25830)\n\n## Visualize\nplot(st_geometry(iberia_sf))\n```\n\n::: {.cell-output-display}\n![Study area](index_files/figure-html/fig-iberia-1.png){#fig-iberia width=672}\n:::\n:::\n\n\n\nNote that we also transformed the Coordinates Reference System to a projected system (EPSG 25830).\n\n### Wolf data\n\nIn this exercise, we will study the distribution of the gray wolf (*Canis lupus*; @fig-wolf) in the Iberian Peninsula:\n\n![Gray wolf (Source: wikipedia)](figs/wolf-picture.jpg){#fig-wolf fig-align=\"center\"}\n\nAs a proxy of the distribution, we will use data from GBIF for the period 2014-2023. This database contains information about observations of any species in the world. We will use the `sp_occurrence()` function from the `{geodata}` package, and we will add two arguments to specify the countries (ES for Spain, PT for Portugal) and the period (2014-2023).\n\n::: callout-tip\nTo specify a period, separate two years by a comma.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Download wolf data\n## - Years: 2014-2023\nwolf_lst <- map(\n  .x = c(\"ES\", \"PT\"),\n  .f = \\(x) sp_occurrence(\n    genus   = \"Canis\",\n    species = \"lupus\",\n    args    = c(\n      paste0(\"country=\", x),\n      \"year=2014,2023\"\n    )\n  )\n)\n```\n:::\n\n\n\nNote that we use the `purrr::map()` function to iterate over two elements (ES and PO) which are used in the *country* argument.\n\nWe are using a projected CRS, but the coordinates data that we have in `wolf_lst` are in the WGS 84. Therefore, we need to transform this list to a `sf` object, and transform the coordinates to the new CRS.\n\nAnother thing to note is that we have data from the entire countries, but we want only from the Iberian Peninsula. In this sense, we can use `st_intersection()` to filter only the observations in the Iberian Peninsula.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Bind data, convert to sf, transform and select points within Iberia\nwolf_sf <- list_rbind(wolf_lst) |> \n  st_as_sf(\n    coords = c(\"lon\", \"lat\"),\n    crs    = 4326\n  ) |> \n  st_transform(25830) |> \n  st_intersection(iberia_sf) |> \n  select(country) \n\n## Visualize\nplot(st_geometry(wolf_sf))\nplot(st_geometry(iberia_sf), add = TRUE)\n```\n\n::: {.cell-output-display}\n![Gray wolf observations in the Iberian Peninsula](index_files/figure-html/fig-wolf-iberia-1.png){#fig-wolf-iberia width=672}\n:::\n:::\n\n\n\n## Introduction to mapgl\n\nBefore creating the heatmap, we will see how to use the functions of this package. If you followed the @sec-setup, you can run the following code to create a basic mapbox map:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapboxgl()\n```\n:::\n\n{{< video posts/009_wolves_iberia_mapgl/figs/first_map.mp4 >}}\n\n\n\n\nYou can zoom in and out in the map, and you can also use your right mouse button to rotate the map. If you zoom in to a city, you will see some of the buildings in 3D, which I think it's amazing!!\n\nNow, we will tweak some parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapboxgl(\n  style  = mapbox_style(\"satellite\"),\n  center = c(-7, 42),\n  zoom   = 5\n) |> \n  fly_to(\n    center = c(-7, 42),\n    zoom   = 10\n  )\n```\n:::\n\n{{< video posts/009_wolves_iberia_mapgl/figs/second_map.mp4 >}}\n\n\n\n\n-   style: this argument takes the function `mapbox_style()` to set a base map. The possible options are: standard, streets, outdoors, light, dark, satellite, satellite-streets, navigation-day, and navigation-night.\n-   center: the coordinates of the center of the map in the beginning.\n-   zoom: the zoom level of the map in the beginning.\n-   fly_to(): this function will create a flying effect from the center and zoom set in the `mapboxgl()` function to the ones selected in `fly_to()`.\n\n## Wolves heatmap\n\nFinally, we will create a heatmap of the density of wolves in the Iberian Peninsula. We will add the layer to the map using the `add_heatmap_layer()` function which takes the following mandatory arguments:\n\n-   id: an unique ID for the layer\n\n-   source: the data source. In this case, an `sf` object.\n\nThere are other optional arguments that can improve the map:\n\n-   heatmap_opacity: the opacity of the heatmap layer. 0 is completely transparent, 1 is completely opaque.\n-   heatmap_intensity: defines the intensity of the points. An interpolation expression can be used to define the intensity.\n-   Other arguments: heatmap_color, heatmap_radius, heatmap_weight ...\n\nAn interpolation expression is an expression which smoothly transitions values between a series of stops.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapboxgl(\n  style = mapbox_style(\"satellite\")\n) |> \n  fit_bounds(\n    iberia_sf\n  ) |> \n  add_heatmap_layer(\n    id     = \"wolves-heatmap\",\n    source = wolf_sf,\n    heatmap_intensity = interpolate(\n      property = \"heatmap-density\",\n      values   = c(0, 1),\n      stops    = c(1, 2)\n    ),\n    heatmap_opacity = .5\n  )\n```\n:::\n\n{{< video figs/third_map.mp4 >}}\n\n\n\n\nNote that we also used the `fit_bounds()` function to fit the map view to the extent of the Iberian Peninsula.\n\n## Conclusions\n\nCurrently, there are many different packages allowing you to create interactive maps in R (mapview, leaflet, plotly, mapboxapi, mapgl ...). I think `mapgl` is great because it let us to create interactive maps using mapbox, which can load faster and more data than other alternatives. Note also that this package it's in early stages and might have some limitations, and new features to come.\n\nHowever, as you could see, mapbox it's not completely free and that might be a limitation for some users. In this sense, [MapLibre](https://maplibre.org/) has appeared as fork of mapbox which is completely free and it can also be used through the `{mapgl}` package. The next week, we will cover more features of this package using MapLibre.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}