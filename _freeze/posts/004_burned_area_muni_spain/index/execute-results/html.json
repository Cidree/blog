{
  "hash": "5befa8e311381528dadcebffba7ec1b5",
  "result": {
    "markdown": "---\ntitle: \"Spanish Burned Area during 2006-2015 by Municipality\"\ndate: \"2023-12-31\"\ncategories: [R, forestry, wildfires, ggplot2, rayshader]\nimage: \"image.png\"\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Introduction\n\nIn this post, we will explore the distribution of the burned area in Spain by municipality creating a 3D visualization using the awesome package `rayshader` üòé.\n\nHonestly, I am not fan of 3D plots in general, because they are usually horrible and deceiving when trying to communicate something. However, with `rayshader` we can create spikes maps which can somehow look great and communicating the message properly.\n\n::: callout-important\nIf you can, avoid always to create a 3D plot (3D pie charts (even 2D, please), 3D bar charts...).\n:::\n\nThe data was obtained from the MITECO (Ministerio para la Transici√≥n Ecol√≥gica y el Reto Demogr√°fico), and it can be found in this [url](https://www.miteco.gob.es/es/biodiversidad/servicios/banco-datos-naturaleza/informacion-disponible/incendios-forestales.html).\n\nI will use the data for the decade 2006-2015, which is the latest available data for this purpose.\n\n## Loading packages\n\nAs usually, we will start loading all the necessary packages by using the `pacman` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\n\np_load(\n  ## Data manipulation\n  tidyverse, readxl,\n  \n  ## Spatial data manipulation\n  sf, \n  \n  ## Download data\n  mapSpain,\n  \n  ## Visualization\n  rayshader\n)\n```\n:::\n\n\nWe will use the `tidyverse` for data wrangling and visualization, the `readxl` package for reading our data in *Excel* format, the `sf` package for vectorial data manipulation, the package `mapSpain` for downloading some convenient spatial data, and finally `rayshader` for creating 3D visualizations.\n\n## Load the data\n\nThe data is the same I used in the [previous post](https://adrian-cidre.com/posts/003_wildfires_ccaa_spain/), but this time we will work with the municipalities instead of autonomous communities, and with burned area instead number of wildfires. Nevertheless, the first step will be to load the data, and fix the table names so we can all understand what's going on with this dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load data\nwildfires_tbl <- read_excel(\"wildfires_2006_2015.xlsx\", sheet = 3) \n\n## Set names\nwildfires_tbl <- wildfires_tbl %>% \n  select(\n    mun = NOMBRE, code = CODIGOINE, woodland_area = ARBOLADO,\n    treeless_area = NOARBOLADO, total_area = TOTAL\n  )\n\nglimpse(wildfires_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,376\nColumns: 5\n$ mun           <chr> \"A Arnoia\", \"A Ba√±a\", \"A Bola\", \"A Ca√±iza\", \"A Capela\", ‚Ä¶\n$ code          <dbl> 32003, 15007, 32014, 36009, 15018, 15030, 36017, 27018, ‚Ä¶\n$ woodland_area <dbl> 30, 615, 16, 978, 394, 18, 262, 600, 8, 803, 30, 364, 60‚Ä¶\n$ treeless_area <dbl> 8, 82, 61, 1260, 165, 104, 791, 641, 17, 3395, 6, 1558, ‚Ä¶\n$ total_area    <dbl> 38, 697, 77, 2238, 559, 122, 1053, 1241, 25, 4198, 36, 1‚Ä¶\n```\n:::\n:::\n\n\nI selected a total of 5 columns: the first two columns corresponds to the name and ID of the municipalities, and the remaining columns refer to the burned area (woodland, treeless, and total burned area).\n\n## Prepare data\n\nThe data preparation is not very demanding to be honest. We have to download the map of Spain by municipalities, and for doing so, we have the convenient function `esp_get_munic()` from the `mapSpain` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get data\nesp_mun_sf <- esp_get_munic() %>% \n  filter(!(ine.ccaa.name %in% c(\"Melilla\", \"Ceuta\"))) %>% \n  mutate(code = as.numeric(LAU_CODE))\n\n## Explore data\nhead(esp_mun_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -3.14019 ymin: 36.73845 xmax: -2.05701 ymax: 37.54576\nGeodetic CRS:  ETRS89\n    codauto ine.ccaa.name cpro ine.prov.name cmun      name LAU_CODE\n382      01     Andaluc√≠a   04       Almer√≠a  001      Abla    04001\n379      01     Andaluc√≠a   04       Almer√≠a  002  Abrucena    04002\n374      01     Andaluc√≠a   04       Almer√≠a  003      Adra    04003\n375      01     Andaluc√≠a   04       Almer√≠a  004 Alb√°nchez    04004\n358      01     Andaluc√≠a   04       Almer√≠a  005 Alboloduy    04005\n373      01     Andaluc√≠a   04       Almer√≠a  006     Albox    04006\n                          geometry code\n382 POLYGON ((-2.77744 37.23836... 4001\n379 POLYGON ((-2.88984 37.09213... 4002\n374 POLYGON ((-2.93161 36.75079... 4003\n375 POLYGON ((-2.13138 37.29959... 4004\n358 POLYGON ((-2.70077 37.09674... 4005\n373 POLYGON ((-2.15335 37.54576... 4006\n```\n:::\n:::\n\n\nHere, we got the Spanish map as a *simple feature* object from the `sf` package, we eliminated Ceuta and Melilla (no information about wildfires), and converted the `LAU_CODE` column from character to numeric.\n\nThe last step before the visualization is to join the wildfires table with the municipalities, so we have the information of the wildfires stored in a spatial object. This is pretty straightforward by using the `left_join` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesp_mun_wildfires_sf <- esp_mun_sf %>% \n  left_join(\n    wildfires_tbl,\n    by = join_by(code == code)\n  ) \n```\n:::\n\n\nThis will generate many NA values because in the `wildfires_tbl` we have a total of 4376, while in `esp_mun_sf` we have a total of 8129. This is because not every municipality of Spain had suffered wildfires. These NA values can be then changed by the value of 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesp_mun_wildfires_sf <- esp_mun_wildfires_sf %>% \n  mutate(\n    total_area = if_else(is.na(total_area), 0, total_area)\n  )\n```\n:::\n\n\n## 2D visualization\n\nIn this post we will learn how to turn a basic `ggplot2` plot into a basic 3D visualization using `rayshader`. Therefore, the first step is to create a `ggplot2` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create ggplot2 object\nesp_mun_wildfires_gg <- esp_mun_wildfires_sf %>% \n  ggplot() +\n  # Geometries\n  geom_sf(aes(fill = total_area), color = NA) +\n  # Scales\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  # Labels\n  labs(title    = \"Burned Area in Spain during 2006-2015\",\n       caption  = \"@2023 Adri√°n Cidre (https://adrian-cidre.com)\\nData: MITECO\",\n       fill     = \"Area (ha)\") +\n  # Theme\n  theme_void(base_family = \"Rockwell\") +\n  theme(\n    plot.title = element_text(\n      size   = 14,\n      face   = \"bold\", \n      hjust  = .95, \n      colour = \"indianred4\",\n      margin = margin(b = 23, t = 5)\n    ),\n    plot.caption      = element_text(\n      size   = 8, \n      colour = \"indianred4\",\n      hjust  = .5\n    ),\n    legend.title      = element_text(size = 8, colour = \"indianred4\"),\n    legend.text       = element_text(size = 8, colour = \"indianred4\"),\n    legend.position   = \"bottom\",\n    legend.key.width  = unit(1, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    plot.background   = element_rect(fill = \"#B0C4DE\", colour = NA)\n  )\n\n## Display plot\nesp_mun_wildfires_gg\n```\n\n::: {.cell-output-display}\n![Distribution of total burned area in Spain by Municipality during the period 2006-2015](index_files/figure-html/fig-vis2d-1.png){#fig-vis2d width=576}\n:::\n:::\n\n\n## 3D Visualization\n\nOnce we have this visualization, we can use the `rayshader::plot_gg` function. This function has many arguments to control the appearance of our map. In this tutorial I will show you the basic ones:\n\n-   Multicore = TRUE: it will use multiple cores to compute the shadow matrix. This is computationally demanding, so this can improve the performance.\n\n-   Width and height: they control the size of the `ggplot2` object.\n\n-   Scale: the vertical scaling. The higher this number, the taller the spikes.\n\n-   Shadow intensity: a number between 0 and 1, representing the intensity of the shadows. When set to 0 the shadows are completely black, while 1 means no shadows.\n\n-   Sunangle: the angle from where the sun would generate the shadows. The default 315, means that the sun is shining from the North West.\n\n-   Offset edges: when TRUE, adds some space between polygons.\n\n-   Window size: the size of the RGL device (preview window) when executing the function.\n\n-   Zoom: amount of zoom to the plot.\n\n-   Phi ($\\phi$): azimuth angle (@fig-angles).\n\n-   Theta ($\\theta$): rotation around z-axis (@fig-angles).\n\n![Phi and theta angles](angles.png){#fig-angles fig-align=\"center\"}\n\nWith all these parameters set, we can execute the function `plot_gg()` which will open a new window to visualize the rendered plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_gg(\n  esp_mun_wildfires_gg,\n  multicore        = TRUE,\n  width            = 5,\n  height           = 5,\n  scale            = 150,\n  shadow_intensity = .6,\n  sunangle         = 315,\n  offset_edges     = FALSE,\n  windowsize       = c(600, 600),\n  zoom             = .5, \n  phi              = 35, \n  theta            = -30\n)\n```\n:::\n\n\nAfter we set the parameters that makes us happy, we can export the last rendered object by using the `rayshader::render_snapshot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_snapshot(filename = \"wildfires_ha_muni.png\", clear = FALSE)\n```\n:::\n\n\nThe result can be seen in @fig-vis3d. As we saw in my [previous post](https://adrian-cidre.com/posts/003_wildfires_ccaa_spain/), the area that is most affected by the wildfires is by far the northwestern area of Spain, both in number of fires and burned hectares.\n\n![Burned area in Spain during 2006-2016 by municipality. The tallest spikes represent higher burned area.](wildfires_ha_muni.png){#fig-vis3d fig-align=\"center\"}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}