{
  "hash": "2325d974fe440f11e7cfb07ea1328d38",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using MapLibre and MapTiles in R with mapgl\"\ndescription: \"Create an interactive map showing the cycling routes and landmarks in Picos de Europa National Park\"\ndate: \"2024-07-28\"\ncategories: [interactive, R, spatial]\nimage: \"image.png\"\nbibliography: references.bib\nexecute: \n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n{{< video https://youtu.be/wgCP6K-rmpU >}}\n\n\n\n\n\n\n## Introduction\n\nCreating interactive maps in R is pretty easy with `{mapview}` or `{leaflet}`. However, other external libraries such as MapBox or MapLibre have shown a great power for creating web applications. Thanks to [Kyle Walker](https://www.linkedin.com/in/walkerke/) we have access to these powerful libraries using the `{mapgl}` package that has been released to CRAN this week. Although the package is in its early stages, we can already do a lot with it.\n\nIn this tutorial, we will create a map that shows the cycling routes and landmarks in Picos de Europa National Park (Spain):\n\n![Picos de Europa National Park (Source: Turismo de Asturias)](figs/picos_europa.jpg){#fig-picos-europa fig-align=\"center\"}\n\nYou will learn:\n\nüóÇÔ∏è How to unrar files in R\n\nüåê Download data from Open Street Maps directly into R\n\nüó∫Ô∏è Use MapLibre and MapTiler in R\n\nüîç Add vectorial layers to MapLibre and MapTiler (points, lines, and polygons), and customize them adding hover and tooltip effects\n\nüìä Create a legend\n\n::: callout-note\nRemember that you can find all the code in [this repository](https://github.com/Cidree/blog_scripts/tree/main/009_intro_maplibre_maptiler).\n:::\n\n## Loading packages\n\nWe will use the following packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load pacman\nlibrary(pacman)\n\n## Load rest of the packages\np_load(archive, fs, mapgl, mapview, osmdata, sf, tidyverse)\n```\n:::\n\n\n\n\n-   `{archive}` [@archive]: we will use it to unrar files.\n\n-   `{fs}` [@fs]: used to create a directory tree.\n\n-   `{mapgl}` [@mapgl]: interface to MapBox GL JS and MapLibre.\n\n-   `{mapview}` [@mapview]: quickly interactive maps for exploration.\n\n-   `{osmdata}` [@osmdata]: to import Open Street Map features.\n\n-   `{sf}` [@sf]: to manipulate vectorial data.\n\n-   `{tidyverse}` [@tidyverse]: to manipulate data in general.\n\n## Mapbox, MapLibre and MapTiler {#sec-setup}\n\nWe covered Mapbox in the [previous week's post](https://adrian-cidre.com/posts/009_wolves_iberia_mapgl/){target=\"_blank\"}. Mapbox is a commercial platform that was open source from 2010 to 2020. It's a JavaScript library for displaying maps using WebGL.\n\nMapLibre was born in December 2020 by a group of contributors who wanted to continue the work of Mapbox as an open source library.\n\nMapTiler is another library that extends the functionality of MapLibre. It has commercial and open source capabilities, and it's mostly focused on tiles and hosting. We will use it to access the variety of tiles that it has available. Note that you need to create an account in [https://www.maptiler.com/](https://www.maptiler.com/){target=\"_blank\"}.\n\n![MapTiler cloud](figs/maptiler_cloud.png){#fig-maptiler-cloud fig-align=\"center\"}\n\nIn @fig-maptiler-cloud you can see the tiles that are available to use with the `{mapgl}` package. On the left, you can go to API keys to set your environment variable and be able to access your MapTiler cloud. You can follow the next instructions to set the environment variable:\n\n![Instructions to set the environment variable](figs/env_var.png){#fig-maptiler-envvar fig-align=\"center\"}\n\n## Load the data\n\nIn this exercise we need to download three sources of data:\n\n-   Study area (Picos de Europa National Park)\n\n-   Cycling routes\n\n-   Landmarks\n\n### Study area\n\nThe study area for this exercise is Picos de Europa National Park in Spain. We can download all the data directly [from here](https://www.miteco.gob.es/es/parques-nacionales-oapn/red-parques-nacionales/sig/parques-nacionales.html){target=\"_blank\"}, and unrar it manually. However, I always prefer to maintain the reproducibility of my scripts as higher as possible maintaining also the source of the data. That's why we will download the data using R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Url to national parks file\nurl <- \"https://www.miteco.gob.es/content/dam/miteco/es/parques-nacionales-oapn/red-parques-nacionales/sig/limites_red_tcm30-452281.rar\"\n\n## Define paths for download and unrar \nrar_file <- str_glue(\"{tempdir()}/{basename(url)}\")\ndest_dir <- str_remove(rar_file, \".rar\")\n\n## Download file\ndownload.file(\n  url      = url,\n  destfile = rar_file,\n  mode     = \"wb\"\n)\n\n## unrar file\ntry(\n  archive_extract(rar_file, dest_dir),\n  silent = TRUE\n)\n```\n:::\n\n\n\n\nThere, we are defining two paths. One for downloading the rar file, and another for the extracting. We use the `archive_extract()` function to extract `.rar` files in R. Note that I need to wrap it within the `try()` function because it throws an error. However, the function works without problem, as we can wee in the directory tree:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(dest_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC:\\Users\\Cidre\\AppData\\Local\\Temp\\Rtmp0YxTug/limites_red_tcm30-452281\n‚îî‚îÄ‚îÄ limites_red\n    ‚îú‚îÄ‚îÄ desc_Red_PN_LIM_Enero2023.rar\n    ‚îú‚îÄ‚îÄ Limites_PPNN.rar\n    ‚îî‚îÄ‚îÄ Metadatos_Limites_PN.pdf\n```\n\n\n:::\n:::\n\n\n\n\nNow, we need to extract `desc_Red_PN_LIM_Enero2023.rar` because the spatial data in located inside that folder:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract spatial data\ntry(\n  archive_extract(\n    paste0(dest_dir, \"/limites_red/desc_Red_PN_LIM_Enero2023.rar\"), \n    dest_dir\n  ), \n  silent = TRUE\n)\n\n## See directory tree\nfs::dir_tree(dest_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC:\\Users\\Cidre\\AppData\\Local\\Temp\\Rtmp0YxTug/limites_red_tcm30-452281\n‚îú‚îÄ‚îÄ desc_Red_PN_LIM_Enero2023\n‚îÇ   ‚îú‚îÄ‚îÄ Limites_PPNN.kml\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.cpg\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.dbf\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.prj\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.sbn\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.sbx\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.shp\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.shp.xml\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_c.shx\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.cpg\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.dbf\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.prj\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.sbn\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.sbx\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.shp\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.shp.xml\n‚îÇ   ‚îú‚îÄ‚îÄ Limite_PN_p_b.shx\n‚îÇ   ‚îú‚îÄ‚îÄ metadata.xml\n‚îÇ   ‚îú‚îÄ‚îÄ Metadatos_Limites_PN.pdf\n‚îÇ   ‚îî‚îÄ‚îÄ Modelo_Datos_LIMITES.xlsx\n‚îî‚îÄ‚îÄ limites_red\n    ‚îú‚îÄ‚îÄ desc_Red_PN_LIM_Enero2023.rar\n    ‚îú‚îÄ‚îÄ Limites_PPNN.rar\n    ‚îî‚îÄ‚îÄ Metadatos_Limites_PN.pdf\n```\n\n\n:::\n:::\n\n\n\n\nNow we can finally read the data into R using the `{sf}` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Read national parks\nnational_parks_sf <- \n  paste0(dest_dir, \"/desc_Red_PN_LIM_Enero2023/Limite_PN_p_b.shp\") |> \n  read_sf()\n\n## Glimpse the data\nnational_parks_sf |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 13\nColumns: 10\n$ Nom_Parque <chr> \"20\", \"06\", \"24\", \"03\", \"13\", \"01\", \"02\", \"08\", \"04\", \"07\",‚Ä¶\n$ Declaracio <chr> \"Ley 1/2007, de 2 de marzo\", \"RD 16/08/1918, declaraci√≥n de‚Ä¶\n$ Reclasific <chr> NA, \"Ley 52/1982, de 13 de julio de reclasificaci√≥n y ampli‚Ä¶\n$ Ampliacion <chr> NA, \"Ley 52/1982, de 13 de julio de reclasificaci√≥n y ampli‚Ä¶\n$ Fecha_Dec  <date> 2007-03-02, 1918-08-16, 2013-07-07, 1973-06-28, 2002-07-01‚Ä¶\n$ Sup_proyec <dbl> 18009.968, 15691.174, 33959.877, 3010.614, 8492.487, 53374.‚Ä¶\n$ Sist_Coord <chr> \"ETRS89-30N\", \"ETRS89-31N\", \"ETRS89-30N\", \"ETRS89-30N\", \"ET‚Ä¶\n$ Modificaci <chr> NA, NA, NA, NA, \"Ley 15/2002, de 1 de julio modificada por ‚Ä¶\n$ d_Nom_Parq <chr> \"Parque Nacional de Monfrag√ºe\", \"Parque Nacional de Ordesa ‚Ä¶\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((251826.2 44..., MULTIPOLYGON (‚Ä¶\n```\n\n\n:::\n:::\n\n\n\n\nNow we need to filter only one National Park, and transform the data to WGS 84, since it's needed to retrieve data from Open Street Map (OSM):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npicos_europa_sf <- national_parks_sf |> \n  filter(\n    str_detect(d_Nom_Parq, \"Picos de Europa\")\n  ) |> \n  st_transform(4326)\n```\n:::\n\n\n\n\n### Cycling routes\n\nNow we need to somehow download the cycling routes into R. We have those features in the OSM dataset that we can access through the `{osmdata}` package. We can see all the features available using the next function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_features()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"4wd_only\"                    \"abandoned\"                  \n  [3] \"abutters\"                    \"access\"                     \n  [5] \"addr\"                        \"addr:city\"                  \n  [7] \"addr:conscriptionnumber\"     \"addr:country\"               \n  [9] \"addr:county\"                 \"addr:district\"              \n [11] \"addr:flats\"                  \"addr:full\"                  \n [13] \"addr:hamlet\"                 \"addr:housename\"             \n [15] \"addr:housenumber\"            \"addr:inclusion\"             \n [17] \"addr:interpolation\"          \"addr:place\"                 \n [19] \"addr:postbox\"                \"addr:postcode\"              \n [21] \"addr:province\"               \"addr:state\"                 \n [23] \"addr:street\"                 \"addr:subdistrict\"           \n [25] \"addr:suburb\"                 \"addr:unit\"                  \n [27] \"admin_level\"                 \"aeroway\"                    \n [29] \"agricultural\"                \"alcohol\"                    \n [31] \"alt_name\"                    \"amenity\"                    \n [33] \"area\"                        \"atv\"                        \n [35] \"backward\"                    \"barrier\"                    \n [37] \"basin\"                       \"bdouble\"                    \n [39] \"bicycle\"                     \"bicycle_road\"               \n [41] \"biergarten\"                  \"boat\"                       \n [43] \"border_type\"                 \"boundary\"                   \n [45] \"brand\"                       \"bridge\"                     \n [47] \"building\"                    \"building:architecture\"      \n [49] \"building:colour\"             \"building:fireproof\"         \n [51] \"building:flats\"              \"building:material\"          \n [53] \"building:min_level\"          \"building:part\"              \n [55] \"building:soft_storey\"        \"bus_bay\"                    \n [57] \"busway\"                      \"capacity\"                   \n [59] \"castle_type\"                 \"change\"                     \n [61] \"charge\"                      \"clothes\"                    \n [63] \"construction\"                \"construction#Railways\"      \n [65] \"construction_date\"           \"covered\"                    \n [67] \"craft\"                       \"crossing\"                   \n [69] \"crossing:island\"             \"cuisine\"                    \n [71] \"cutting\"                     \"cycleway\"                   \n [73] \"cycleway:left\"               \"cycleway:left:oneway\"       \n [75] \"cycleway:right\"              \"cycleway:right:oneway\"      \n [77] \"denomination\"                \"destination\"                \n [79] \"diet:*\"                      \"direction\"                  \n [81] \"dispensing\"                  \"disused\"                    \n [83] \"dog\"                         \"drinking_water\"             \n [85] \"drinking_water:legal\"        \"drive_in\"                   \n [87] \"drive_through\"               \"ele\"                        \n [89] \"electric_bicycle\"            \"electrified\"                \n [91] \"embankment\"                  \"embedded_rails\"             \n [93] \"emergency\"                   \"end_date\"                   \n [95] \"entrance\"                    \"est_width\"                  \n [97] \"fee\"                         \"female\"                     \n [99] \"fire_object:type\"            \"fire_operator\"              \n[101] \"fire_rank\"                   \"food\"                       \n[103] \"foot\"                        \"footway\"                    \n[105] \"ford\"                        \"forestry\"                   \n[107] \"forward\"                     \"frequency\"                  \n[109] \"fuel\"                        \"gauge\"                      \n[111] \"golf_cart\"                   \"goods\"                      \n[113] \"hazard\"                      \"hazmat\"                     \n[115] \"healthcare\"                  \"healthcare:counselling\"     \n[117] \"healthcare:speciality\"       \"height\"                     \n[119] \"hgv\"                         \"highway\"                    \n[121] \"historic\"                    \"horse\"                      \n[123] \"hot_water\"                   \"ice_road\"                   \n[125] \"incline\"                     \"industrial\"                 \n[127] \"inline_skates\"               \"inscription\"                \n[129] \"int_name\"                    \"internet_access\"            \n[131] \"junction\"                    \"kerb\"                       \n[133] \"landuse\"                     \"lane_markings\"              \n[135] \"lanes\"                       \"lanes:bus\"                  \n[137] \"lanes:psv\"                   \"layer\"                      \n[139] \"leaf_cycle\"                  \"leaf_type\"                  \n[141] \"leisure\"                     \"lhv\"                        \n[143] \"lit\"                         \"loc_name\"                   \n[145] \"location\"                    \"male\"                       \n[147] \"man_made\"                    \"max_age\"                    \n[149] \"max_level\"                   \"maxaxleload\"                \n[151] \"maxheight\"                   \"maxlength\"                  \n[153] \"maxspeed\"                    \"maxstay\"                    \n[155] \"maxweight\"                   \"maxwidth\"                   \n[157] \"military\"                    \"min_age\"                    \n[159] \"min_level\"                   \"minspeed\"                   \n[161] \"mofa\"                        \"moped\"                      \n[163] \"motor_vehicle\"               \"motorboat\"                  \n[165] \"motorcar\"                    \"motorcycle\"                 \n[167] \"motorroad\"                   \"mountain_pass\"              \n[169] \"mtb:description\"             \"mtb:scale\"                  \n[171] \"name\"                        \"name:left\"                  \n[173] \"name:right\"                  \"name_1\"                     \n[175] \"name_2\"                      \"narrow\"                     \n[177] \"nat_name\"                    \"natural\"                    \n[179] \"nickname\"                    \"noexit\"                     \n[181] \"non_existent_levels\"         \"nudism\"                     \n[183] \"office\"                      \"official_name\"              \n[185] \"old_name\"                    \"oneway\"                     \n[187] \"oneway:bicycle\"              \"openfire\"                   \n[189] \"opening_hours\"               \"opening_hours:drive_through\"\n[191] \"operator\"                    \"orientation\"                \n[193] \"oven\"                        \"overtaking\"                 \n[195] \"parking\"                     \"parking:condition\"          \n[197] \"parking:lane\"                \"passing_places\"             \n[199] \"place\"                       \"power\"                      \n[201] \"power_supply\"                \"priority\"                   \n[203] \"priority_road\"               \"produce\"                    \n[205] \"proposed\"                    \"protected_area\"             \n[207] \"psv\"                         \"public_transport\"           \n[209] \"railway\"                     \"railway:preserved\"          \n[211] \"railway:track_ref\"           \"recycling_type\"             \n[213] \"ref\"                         \"ref_name\"                   \n[215] \"reg_name\"                    \"religion\"                   \n[217] \"religious_level\"             \"rental\"                     \n[219] \"residential\"                 \"roadtrain\"                  \n[221] \"route\"                       \"sac_scale\"                  \n[223] \"sauna\"                       \"service\"                    \n[225] \"service_times\"               \"shelter_type\"               \n[227] \"shop\"                        \"short_name\"                 \n[229] \"shoulder\"                    \"shower\"                     \n[231] \"sidewalk\"                    \"site\"                       \n[233] \"ski\"                         \"smoking\"                    \n[235] \"smoothness\"                  \"social_facility\"            \n[237] \"sorting_name\"                \"speed_pedelec\"              \n[239] \"sport\"                       \"start_date\"                 \n[241] \"step_count\"                  \"substation\"                 \n[243] \"surface\"                     \"tactile_paving\"             \n[245] \"tank\"                        \"tidal\"                      \n[247] \"toilets\"                     \"toilets:wheelchair\"         \n[249] \"toll\"                        \"topless\"                    \n[251] \"tourism\"                     \"tracks\"                     \n[253] \"tracktype\"                   \"traffic_calming\"            \n[255] \"traffic_sign\"                \"trail_visibility\"           \n[257] \"trailblazed\"                 \"trailblazed:visibility\"     \n[259] \"tunnel\"                      \"turn\"                       \n[261] \"type\"                        \"unisex\"                     \n[263] \"usage\"                       \"vehicle\"                    \n[265] \"vending\"                     \"voltage\"                    \n[267] \"water\"                       \"wheelchair\"                 \n[269] \"wholesale\"                   \"width\"                      \n[271] \"winter_road\"                 \"wood\"                       \n```\n\n\n:::\n:::\n\n\n\n\nWe can also see the tags that are available for each of the features:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(\"route\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 √ó 2\n   Key   Value        \n   <chr> <chr>        \n 1 route bicycle      \n 2 route bus          \n 3 route canoe        \n 4 route detour       \n 5 route ferry        \n 6 route foot         \n 7 route hiking       \n 8 route horse        \n 9 route inline_skates\n10 route light_rail   \n# ‚Ñπ 12 more rows\n```\n\n\n:::\n:::\n\n\n\n\nIn this case, we are interested in the feature *route* and the tag *bicycle*. To retrieve the data from the API, we need to construct a query defining a bounding box, and the feature we want. After that, we specify the format that we want for the data (`sf`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Cycling routes in the bounding box of the National Park\ncycling_routes_osm <- opq(\n  bbox = st_bbox(picos_europa_sf)\n) |> \n  add_osm_feature(\n    key   = \"route\",\n    value = \"bicycle\"\n  ) |> \n  osmdata_sf()\n## Print\ncycling_routes_osm\n```\n:::\n\n\n\n\nBy default, we have a special list with different elements. We are interested in the *multilines*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract routes\ncycling_routes_sf <- cycling_routes_osm$osm_multilines\n## Print\ncycling_routes_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 16 features and 12 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: -5.138023 ymin: 43.06694 xmax: -4.613694 ymax: 43.31263\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                  osm_id                                            name\n9509676-backward 9509676                 [CIMA LE10] Panderruedas * Ca√≠n\n9509732-forward  9509732        [CIMA LE10] Panderruedas * Puente Vidosa\n9512922-backward 9512922                          [CIMA LE15] Pandetrave\n9512922-forward  9512922                          [CIMA LE15] Pandetrave\n9520652-backward 9520652                              [CIMA AS02] Amieva\n9520652-forward  9520652                              [CIMA AS02] Amieva\n9521183-backward 9521183                           [CIMA AS04] Casielles\n9521183-forward  9521183                           [CIMA AS04] Casielles\n9521324-forward  9521324 [CIMA AS05] Jitu de Escarandi (Collado Barreda)\n9530197-forward  9530197                  [CIMA AS07] Lagos de Covadonga\n                     role ascent distance mtb:scale:apm network operator\n9509676-backward backward    965     18.8           238     ncn     CIMA\n9509732-forward   forward   1180     29.8           179     ncn     CIMA\n9512922-backward backward   1077       19           274     ncn     CIMA\n9512922-forward   forward   1077       19           274     ncn     CIMA\n9520652-backward backward    659      7.8           254     ncn     CIMA\n9520652-forward   forward    659      7.8           254     ncn     CIMA\n9521183-backward backward    467     3.85           198     ncn     CIMA\n9521183-forward   forward    467     3.85           198     ncn     CIMA\n9521324-forward   forward   1090     14.5           285     ncn     CIMA\n9530197-forward   forward    962       14           271     ncn     CIMA\n                         ref   route              source  type\n9509676-backward CIMA LE10-1 bicycle https://retocima.es route\n9509732-forward  CIMA LE10-2 bicycle https://retocima.es route\n9512922-backward   CIMA LE15 bicycle https://retocima.es route\n9512922-forward    CIMA LE15 bicycle https://retocima.es route\n9520652-backward   CIMA AS02 bicycle https://retocima.es route\n9520652-forward    CIMA AS02 bicycle https://retocima.es route\n9521183-backward   CIMA AS04 bicycle https://retocima.es route\n9521183-forward    CIMA AS04 bicycle https://retocima.es route\n9521324-forward    CIMA AS05 bicycle https://retocima.es route\n9530197-forward    CIMA AS07 bicycle https://retocima.es route\n                                       geometry\n9509676-backward MULTILINESTRING ((-4.903486...\n9509732-forward  MULTILINESTRING ((-5.09084 ...\n9512922-backward MULTILINESTRING ((-4.903486...\n9512922-forward  MULTILINESTRING ((-4.916104...\n9520652-backward MULTILINESTRING ((-5.124228...\n9520652-forward  MULTILINESTRING ((-5.137599...\n9521183-backward MULTILINESTRING ((-5.086836...\n9521183-forward  MULTILINESTRING ((-5.077389...\n9521324-forward  MULTILINESTRING ((-4.830428...\n9530197-forward  MULTILINESTRING ((-5.059753...\n```\n\n\n:::\n:::\n\n\n\n\nWe can see that some names are repeated because some routes have forward and backward path. We will dissolve those elements into one depending on the name attribute:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Dissolve by name\ncycling_routes_united_sf <- cycling_routes_sf |> \n  group_by(name) |> \n  summarise(\n    geometry = st_union(geometry)\n  ) \n## Print\ncycling_routes_united_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 11 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -5.138023 ymin: 43.06694 xmax: -4.613694 ymax: 43.31263\nGeodetic CRS:  WGS 84\n# A tibble: 11 √ó 2\n   name                                                                 geometry\n   <chr>                                                          <GEOMETRY [¬∞]>\n 1 [CIMA AS02] Amieva                              MULTILINESTRING ((-5.078675 ‚Ä¶\n 2 [CIMA AS04] Casielles                           MULTILINESTRING ((-5.090698 ‚Ä¶\n 3 [CIMA AS05] Jitu de Escarandi (Collado Barreda) LINESTRING (-4.830428 43.258‚Ä¶\n 4 [CIMA AS07] Lagos de Covadonga                  LINESTRING (-5.059753 43.312‚Ä¶\n 5 [CIMA AS18] Collada Ll√≥mena * Puente Vidosa     MULTILINESTRING ((-5.138023 ‚Ä¶\n 6 [CIMA AS37] Collada Trespandiu                  LINESTRING (-4.753377 43.296‚Ä¶\n 7 [CIMA CA03] San Glorio - Collada de Llesba      LINESTRING (-4.620437 43.155‚Ä¶\n 8 [CIMA CA13] La Hoja - Salto de la Cabra         MULTILINESTRING ((-4.662783 ‚Ä¶\n 9 [CIMA LE10] Panderruedas * Ca√≠n                 LINESTRING (-5.013508 43.099‚Ä¶\n10 [CIMA LE10] Panderruedas * Puente Vidosa        LINESTRING (-5.09084 43.2095‚Ä¶\n11 [CIMA LE15] Pandetrave                          MULTILINESTRING ((-4.916104 ‚Ä¶\n```\n\n\n:::\n:::\n\n\n\n\nSo now we can see that we have a total of 11 different paths. We can calculate the length of each route, and create some labels using HTML tags for better display on the map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calculate path length, and create labels for the map\ncycling_routes_united_sf <- cycling_routes_united_sf |> \n  mutate(\n    length = st_length(cycling_routes_united_sf) |> units::set_units(km)\n  ) |> \n  mutate(\n    label = str_glue(\"{name} <br> <b>{round(length, 2)} km</b>\")\n  )\n```\n:::\n\n\n\n\n### Landmarks\n\nWe will retrieve the landmarks labelled as *viewpoint* or *attraction*. The feature that we are interested in is the *tourism*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## OSM tags for tourism\navailable_tags(\"tourism\") |> pull(Value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"alpine_hut\"     \"apartment\"      \"aquarium\"       \"artwork\"       \n [5] \"attraction\"     \"camp_pitch\"     \"camp_site\"      \"caravan_site\"  \n [9] \"chalet\"         \"gallery\"        \"guest_house\"    \"hostel\"        \n[13] \"hotel\"          \"information\"    \"motel\"          \"museum\"        \n[17] \"picnic_site\"    \"theme_park\"     \"viewpoint\"      \"wilderness_hut\"\n[21] \"yes\"            \"zoo\"           \n```\n\n\n:::\n:::\n\n\n\n\nAs before, we need to build an OSM query and retrieve the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get the viewpoints and attractions\nlandmarks_osm <- opq(\n  bbox = st_bbox(picos_europa_sf)\n) |> \n  add_osm_feature(\n    key   = \"tourism\",\n    value = c(\"viewpoint\", \"attraction\")\n  ) |> \n  osmdata_sf()\n## Print the points\nlandmarks_osm$osm_points\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 73 features and 26 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -5.109304 ymin: 43.07675 xmax: -4.619224 ymax: 43.31525\nGeodetic CRS:  WGS 84\nFirst 10 features:\n               osm_id                      name addr:street\n248862660   248862660  Mirador de los Can√≥nigos        <NA>\n282969055   282969055 Mirador del Picu Urriellu        <NA>\n434307223   434307223                      <NA>        <NA>\n491445504   491445504         Mirador del Corzo        <NA>\n637622154   637622154     Puerto de Panderrueda        <NA>\n672438605   672438605         Mirador del Tombo        <NA>\n687454795   687454795   Mirador de Piedrashitas        <NA>\n697949257   697949257     Mirador de Vistalegre        <NA>\n829952039   829952039      Mirador del Pr√≠ncipe        <NA>\n1101023501 1101023501         Cueva de Cuadonga        <NA>\n                                 alt_name direction  ele highway historic  key\n248862660                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n282969055  Mirador del Pozu de la Oraci√≥n      <NA> <NA>    <NA>     <NA> <NA>\n434307223                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n491445504                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n637622154                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n672438605                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n687454795                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n697949257                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n829952039                            <NA>      <NA> <NA>    <NA>     <NA> <NA>\n1101023501                           <NA>      <NA> <NA>    <NA>     <NA> <NA>\n           mapillary name:de name:en name:es natural not:name note\n248862660       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n282969055       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n434307223       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n491445504       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n637622154       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n672438605       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n687454795       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n697949257       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n829952039       <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n1101023501      <NA>    <NA>    <NA>    <NA>    <NA>     <NA> <NA>\n           opening_hours ruins source source:date start_date survey:date\n248862660           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n282969055           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n434307223           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n491445504           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n637622154           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n672438605           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n687454795           <NA>  <NA> ITACyL    20100407       <NA>        <NA>\n697949257           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n829952039           <NA>  <NA>   <NA>        <NA>       <NA>        <NA>\n1101023501          <NA>  <NA>   PNOA        <NA>       <NA>        <NA>\n             tourism wheelchair  wikidata            wikipedia\n248862660  viewpoint       <NA>      <NA>                 <NA>\n282969055  viewpoint       <NA>      <NA>                 <NA>\n434307223  viewpoint       <NA>      <NA>                 <NA>\n491445504  viewpoint       <NA>      <NA>                 <NA>\n637622154  viewpoint       <NA>      <NA>                 <NA>\n672438605  viewpoint       <NA> Q17622552 es:Mirador del Tombo\n687454795  viewpoint       <NA>      <NA>                 <NA>\n697949257  viewpoint       <NA>      <NA>                 <NA>\n829952039  viewpoint       <NA>      <NA>                 <NA>\n1101023501 viewpoint       <NA>      <NA>                 <NA>\n                             geometry\n248862660  POINT (-5.043759 43.30529)\n282969055  POINT (-4.839009 43.31155)\n434307223  POINT (-4.691411 43.10503)\n491445504  POINT (-4.733009 43.07677)\n637622154  POINT (-4.981941 43.12496)\n672438605     POINT (-4.90376 43.171)\n687454795  POINT (-4.980282 43.12907)\n697949257  POINT (-5.051131 43.14847)\n829952039  POINT (-4.983474 43.27841)\n1101023501 POINT (-5.054411 43.30732)\n```\n\n\n:::\n:::\n\n\n\n\nWe are interested in the points. We will classify them as *Viewpoint* or *Other*. To do so, we need first to populate all the NA values on the *name column* as *Unidenfied.* After that, we can classify them in a new column called *type*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract points, and create a \"type\" column\nlandmarks_sf <- landmarks_osm$osm_points |> \n  mutate(\n    name = ifelse(\n      is.na(name), \"Unidentified\", name\n    ),\n    type = if_else(\n      str_detect(name, \"Mirador\"), \"Viewpoint\", \"Other\"\n    )\n  ) |> \n  select(name, type)\n## Print\nlandmarks_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 73 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -5.109304 ymin: 43.07675 xmax: -4.619224 ymax: 43.31525\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                                name      type                   geometry\n248862660   Mirador de los Can√≥nigos Viewpoint POINT (-5.043759 43.30529)\n282969055  Mirador del Picu Urriellu Viewpoint POINT (-4.839009 43.31155)\n434307223               Unidentified     Other POINT (-4.691411 43.10503)\n491445504          Mirador del Corzo Viewpoint POINT (-4.733009 43.07677)\n637622154      Puerto de Panderrueda     Other POINT (-4.981941 43.12496)\n672438605          Mirador del Tombo Viewpoint    POINT (-4.90376 43.171)\n687454795    Mirador de Piedrashitas Viewpoint POINT (-4.980282 43.12907)\n697949257      Mirador de Vistalegre Viewpoint POINT (-5.051131 43.14847)\n829952039       Mirador del Pr√≠ncipe Viewpoint POINT (-4.983474 43.27841)\n1101023501         Cueva de Cuadonga     Other POINT (-5.054411 43.30732)\n```\n\n\n:::\n:::\n\n\n\n\n## Map\n\nFinally, we can create the final map using MapLibre and MapTiler. Remember that this will only work if you followed the instructions of @fig-maptiler-envvar. We have vectorial data representing the three main geometry types:\n\n-   Study area: represented by a polygon. It will be mapped using `add_fill_layer()`.\n\n-   Cycling routes: represented by lines. It will be mapped using `add_line_layer()`.\n\n-   Landmarks: represented by points. It will be mapped using `add_circle_layer()`.\n\nAll of these functions have two mandatory arguments:\n\n-   id: an unique identifier for the layer\n\n-   source: the data source. In this case, an `sf` object.\n\nThere are other optional arguments that are specific to the geometry type. First, we will create a base map using the *satellite* tile from MapTiler, fit the bounds to the national park with an animation, and adding some navigation and fullscreen control widgets:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- maplibre(\n  style  = maptiler_style(\"satellite\"),\n)  |> \n  fit_bounds(\n    picos_europa_sf,\n    animate = TRUE\n  ) |>\n  add_navigation_control() |> \n  add_fullscreen_control()\n```\n:::\n\n{{< video figs/01_webmap.mp4 >}}\n\n\n\n\n\n\nNext, we can add the polygon layer with transparent fill color, and red outline. Note that the current version of `{mapl}` doesn't support outline width.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- map |> \n  add_fill_layer(\n    id                 = \"picos_europa\",\n    source             = picos_europa_sf,\n    fill_color         = \"transparent\",\n    fill_opacity       = 1,\n    fill_outline_color = \"red\"\n  )\n```\n:::\n\n{{< video figs/02_webmap.mp4 >}}\n\n\n\n\n\n\nNow we will add the cycling routes on top of the previous layer. We add the `tooltip` argument where we can specify a column name to show when we hover the geometries. The argument `hover_options` takes a list where we can specify specific options to the state of `hover`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- map |> \n  add_line_layer(\n    id            = \"routes\",\n    source        = cycling_routes_united_sf,\n    line_color    = \"wheat\",\n    line_width    = 2,\n    tooltip       = \"label\",\n    hover_options = list(\n      line_color = \"red\",\n      line_width = 5\n    )\n  )\n```\n:::\n\n{{< video figs/03_webmap.mp4 >}}\n\n\n\n\n\n\nFinally, we can add the landmarks with a legend based on the `type` column. In this case, for the `circle_color` we use a `match_expr()` to specify the column, the unique values of the column, and a vector of stops (colors).\n\nWe can add a categorical legend specifying the values and colors again. Note that the legend is independent from the data, so we have a lot of flexibility to create it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Colours for points\npoint_col <- c(\"lightcoral\", \"lavender\")\n\n## Map\nmap <- map |> \n  add_circle_layer(\n      id                    = \"landmarks\",\n      source                = landmarks_sf,\n      popup                 = \"name\",\n      circle_opacity        = 1,\n      circle_radius         = 6,\n      circle_stroke_color   = \"black\",\n      circle_stroke_opacity = 1,\n      circle_stroke_width   = 1,\n      circle_color          = match_expr(\n        column = \"type\",\n        values = landmarks_sf$type |> unique(),\n        stops  = point_col\n      ),\n    ) |> \n    add_categorical_legend(\n      legend_title     = \"Landmark\",\n      values           = landmarks_sf$type |> unique(),\n      colors           = point_col,\n      unique_id        = \"landmark_legend\",\n      circular_patches = TRUE\n    ) \n```\n:::\n\n{{< video figs/04_webmap.mp4 >}}\n\n\n\n\n\n\n## Conclusions\n\n`mapgl` is an awesome package that allows us to access the Mapbox and MapLibre libraries. This package has been released to CRAN very recently, and although it's features are already awesome, there are some features that haven't been added yet. For instance, if you try to add another independent legend, it will overwrite the previous one. We also saw that the polygon's outline width cannot be adjusted. However, the package it's in its very early stages and as you could saw in this tutorial you can map all the main vectorial geometries using `mapgl`. This package is a great achievement for the R community, and you can support the project of Kyle Walker in the [GitHub repository](https://github.com/walkerke/mapgl){target=\"_blank\"}.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}